1.
Currently we have multiple Software Development Engineers roles at Amazon with different teams at out Seattle Headquarters. Here are some general points that we are looking for or that would be beneficial:

To be successful:
Java and/or C++ (and/or C#) with experience in developing analytical or optimization applications. 
You should be experienced with SQL for ad hoc data analysis as well as application development. 
Experience with data mining, forecasting, and optimization is preferred.  
Practical experience with software engineering best-practices, agile development methodology and test driven development are highly desired.  
Note on immigration and compensation package:
We do cover immigration expenses and legal part of it for you to relocate permanently to United States. Also in 6 month of full-time employment at Amazon you are eligible for permanent residency sponsorship. Amazon covers all the expenses. 

Our final competitive compensation is always decided only after in-person interviews with the team, but it consists of 3 components: base salary, signing bonus and restricted stock units. 

2. 
Thank you for the interest in Amazon.com and Global Fulfillment Platform. This document will help you understand the skills and competencies that will make you successful as a software development engineer at Amazon.com and in the interview process

At Amazon.com we’re looking for talented engineers that can apply the knowledge that they’ve learned to solve some of the world’s most complicated software problems.  Below is a list of broad areas that we expect people to be familiar with. Note: This list is a reference guide for preparing to interview with Amazon.com, not a list of requirements.

Programming Languages
Our systems are built using a diverse set of technologies but most teams work primarily in Java or C++. You should be familiar with the syntax of a language like C++, Java, or C# and you should also know some of the language nuances such as how memory management works, what some of the most commonly used collections or libraries are, etc.  
Additionally it is helpful to know a scripting language such as Perl or Python and familiarity with standard Unix command like tools.

Data Structures
Much of the work we do involves storing and providing access to large data sets in efficient ways. Thus familiarity with data structures is essential for success.  You should know basic information, such as when to use them, runtimes for common operations and some idea of how to implement them, about common data structures such as stacks / queues, arrays, trees / graphs and hash tables / dictionaries.

Algorithms
The core challenge for our software developers is finding efficient ways manipulate large-scale data, so you will need to demonstrate knowledge of common algorithms and an understanding of time / space complexity (big-O notation). We’ll expect that you can apply and discuss the tradeoffs between some commonly used algorithms such as various approaches to sorting, graph traversal and various approaches to optimization.

Coding
You will be asked to write working code (not pseudocode) during the interview. You will not have access to an IDE, so you might want to practice with pen and paper. The most important thing a software engineer does at Amazon.com is write performing, stable, clear and well tested code.  These are going to be the main criteria by which your code will be evaluated, so make sure that you check for edge cases and common error inputs as well as common use cases.

Object Oriented Design
Good design is essential to extensible, bug free and maintainable code.  You should have a working knowledge of a few common and useful design patterns (singleton, factory, adapter, bridge, visitor, command, proxy, observer, etc.) as well as know how to write software in an object oriented way with appropriate use of inheritance and aggregation.

Databases
Most of the software that we write is backed by a database somewhere.  A lot of the challenges we face come in to play when interfacing with existing data models and when designing new data models.  You should know the basics of how relational databases work, how to design relational database schemas, as well as how to write basic SQL queries against a database.

3.
Here are some tips for the technical phone interview:

Go to Amazon career section. And take a look at Amazon Leadership Principles. It will be very helpful and informational. It takes just 5 minutes 
Remember that during the interview we want to access your thought process. So ask questions if you do not understand the question or you need more information/details to come up with the solution.
Brush up on computer science fundamentals.
We do not tie our coding questions to any specific technology you can use the language that you are strongest in/have most experience with.
Also here are some books to look at if you have time, they will be helpful during the interview:
Java Concurrency In Practice
Effective Java
Programming Interviews Exposed

Please let me know if you have any questions and definitely send me a note back if you need an update.

Thank you, 
Tetiana Danylchenko

4. 

Tech Prep Tips


Algorithm Complexity: you need to know Big-O. 

Sorting: know how to sort: the details of at least one n*log(n) sorting algorithm, preferably two (say, quicksort and merge sort). Merge sort can be highly useful in situations where quicksort is impractical, so take a look at it.

Hashtables

Trees: basic tree construction, traversal and manipulation algorithms. Binary trees, n-ary trees, and trie-trees at the very very least. At least one flavor of balanced binary tree, whether it's a red/black tree, a splay tree or an AVL tree. Tree traversal algorithms: BFS and DFS, the difference between inorder, postorder and preorder.

Graphs: There are three basic ways to represent a graph in memory (objects and pointers, matrix, and adjacency list), each representation and its pros and cons.

The basic graph traversal algorithms: breadth-first search and depth-first search. Their computational complexity, their tradeoffs, and how to implement them in real code.

Dijkstra and A*, if you get a chance. 

Whenever someone gives you a problem, think graphs. They are the most fundamental and flexible way of representing any kind of a relationship, so it's about a 50-50 shot that any interesting design problem has a graph involved in it. Make absolutely sure you can't think of a way to solve it using graphs before moving on to other solution types. This tip is important!

Other data structures

Math – a plus if you go over it, but not a must

Basic discrete math questions. Counting problems, probability problems, and other Discrete Math 101 situations. Familiarity with n-choose-k problems and their ilk.


Operating Systems: Processes, threads and concurrency issues. Locks and mutexes and semaphores and monitors and how they work. Deadlock and livelock and how to avoid them. What resources a processes needs, and a thread needs, and how context switching works, and how it's initiated by the operating system and underlying hardware. A little scheduling.

Concurrent Programming in Java. 

Coding: Preferably C++ or Java. C# is OK. Please know a fair amount of detail about your favorite programming language.



